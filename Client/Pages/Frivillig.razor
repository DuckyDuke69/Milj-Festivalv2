<style>
    body {
        background-color: #315d55;
    }
</style>



@page "/frivillig"
@using MiljøFestivalv2.Shared
@using System.Net.Http.Json
@using Client.Services
@using System.Globalization
@using System
@inject HttpClient Http
@inject GlobalState GlobalState
@inject NavigationManager NavManager

<link rel="stylesheet" type="text/css" href="Frivillig.razor.css">
<h3>Velkommen, @GlobalState.Brugernavn</h3>
<h1>Dine optjente point @bruger.dine_point</h1>

@if (VagtListe.Count == 0)
{
	<img src="Images/loading.gif" class="GIF">
}
else
{
	// knap til at skifte brugerinfo
	<div>
		<button class="BrugerInfoKnap" onclick="@SkiftBrugerInfo">Skift din bruger information</button>
	</div>

	<div>
		<button class="BelønningInfoKnap" onclick="@RedirectBelønning">Gå til belønninger</button>
	</div>


	<!-- Printer alle Beskeder ud-->
	<div class="besked-oversigt">
		<h1 class="mb-3 mt-3">Beskeder</h1>
		<table class="message-table">
			<thead>
				<tr>
					<th>Besked</th>
					<th>Afsender</th>
					<th>Tidspunkt</th>
				</tr>
			</thead>
			<tbody>
				@foreach (var besked in BeskedListe)
				{
					<tr>
						<td>@besked.besked</td>
						<td>@besked.afsender</td>
						<td>@besked.tidspunkt</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

	// laver mellemrum
	<br />
	<br />
	<br />

	// printer alle vagter samt book knap
	<h1 class="mb-3 mt-3">Alle Vagter</h1>
	<table class="table table-striped">
		<thead>
			<tr>

				<th>Område</th>
				<th>Antal Personer</th>
				<th>Beskrivelse</th>
				<th>Start Tid</th>
				<th>Slut tid</th>
				<th>Prioritering</th>
				<th>Point</th>
				<th>&zwnj;</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var vagt in VagtListe)
			{
				<tr>
					<td>@vagt.område</td>
					<td>@vagt.antal_personer</td>
					<td>@vagt.beskrivelse</td>
					<td>@vagt.start_tid</td>
					<td>@vagt.slut_tid</td>
					<td>@vagt.priotering</td>
					<td>@vagt.point</td>
					@if (vagt.antal_personer > 0 && !ErVagtBooket(vagt.vagt_id))
					{
						<td>
							<button class="btn btn-primary" @onclick="(() => BookVagt(vagt.vagt_id))">Book vagt</button>
						</td>
					}
					else if (vagt.antal_personer > 0)
					{
						<td>
							<button class="btn btn-primary" disabled="disabled">Allerede booket</button>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>
	<br />
	<br />

	// printer alle personlige bookinger ud
	<h1 class="mb-3 mt-3">Dine bookinger</h1>

	<table class="table table-striped">
		<thead>
			<tr>

				<th>Område</th>
				<th>Beskrivelse</th>
				<th>Start Tid</th>
				<th>Slut tid</th>
				<th>Prioritering</th>
				<th>Vagt id</th>
				<th>Point</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var booking in BookingListe)
			{
				<tr>
					<td>@booking.område</td>
					<td>@booking.beskrivelse</td>
					<td>@booking.start_tid</td>
					<td>@booking.slut_tid</td>
					<td>@booking.priotering</td>
					<td>@booking.vagt_id</td>
					<td>@booking.point</td>
					@if (!booking.er_låst)
					{
						<td>
							<button class="btn btn-danger" @onclick="() => SletBooking(booking.booking_id)">Slet Booking</button>
						</td>
					}
					else
					{
						<td>
							<button class="btn btn-dark" style="background-color: grey" disabled="disabled" @onclick="() => SletBooking(booking.booking_id)">Booking er låst</button>
						</td>
					}
				</tr>
			}
		</tbody>
	</table>

}
@code {
	// Laver en liste med datamodel klasserne fra shared
	public List<Vagt> VagtListe = new List<Vagt>();
	public List<Booking> BookingListe = new List<Booking>();
	public List<Msg_board> BeskedListe = new List<Msg_board>();
	public Bruger bruger = new Bruger();

	// Injecter metoderne fra services
	[Inject]
	public IVagtService ServiceVagt { get; set; }
	[Inject]
	public IBookingService ServiceBooking { get; set; }
	[Inject]
	public IMessageService ServiceMessage { get; set; }
	// På initialized henter vagter og brugere
	protected override async Task OnInitializedAsync()
	{
		var bruger_id = GlobalState.bruger_id;
		BookingListe = (await ServiceBooking.HentBookingerForBruger(bruger_id)).ToList();
		VagtListe = (await ServiceVagt.HentAlleVagter()).ToList();

		BeskedListe = (await ServiceMessage.HentAlleBeskeder()).ToList();
	}

	private void SkiftBrugerInfo()
	{
		var bruger_id = GlobalState.bruger_id;
		NavManager.NavigateTo($"/personinfo/{bruger_id}");
	}

	private void RedirectBelønning()
	{
		NavManager.NavigateTo($"/belønninger");
	}

	private async Task BookVagt(int vagtId)
	{

		// Tjekker først om brugeren allerede har booket vagten.
		if (ErVagtBooket(vagtId))
		{
			Console.WriteLine("Du har allerede booket denne vagt.");
			return;
		}

		var booking = new BookingSql
			{
				bruger_id = GlobalState.bruger_id,
				vagt_id = vagtId,
			};

		try
		{
			await ServiceBooking.OpretBooking(booking);

			// Opdaterer bookinglisten efter en vellykket booking
			BookingListe = (await ServiceBooking.HentBookingerForBruger(GlobalState.bruger_id)).ToList();
			VagtListe = (await ServiceVagt.HentAlleVagter()).ToList();
			StateHasChanged();
		}
		catch (Exception ex)
		{
			// Håndter fejl her...
			Console.WriteLine("Fejl ved booking: " + ex.Message);
		}
	}

	private bool ErVagtBooket(int vagtId)
	{
		// Metode til at tjekke om bookinglisten indeholder en vagt med samme vagtid
		return BookingListe.Any(booking => booking.vagt_id == vagtId);
	}

	private async Task SletBooking(int BookingId)
	{
		await ServiceBooking.SletBooking(BookingId);
		BookingListe = (await ServiceBooking.HentBookingerForBruger(GlobalState.bruger_id)).ToList();
		VagtListe = (await ServiceVagt.HentAlleVagter()).ToList();
		StateHasChanged();
	}


}


