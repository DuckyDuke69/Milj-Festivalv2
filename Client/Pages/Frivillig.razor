@page "/frivillig"
@using MiljøFestivalv2.Shared
@using System.Net.Http.Json
@using Client.Services
@using System.Globalization
@inject HttpClient Http
@inject GlobalState GlobalState
@inject NavigationManager NavManager


<h1>Velkommen, @GlobalState.Brugernavn</h1>


<h1 class="mb-3 mt-3">Alle Vagter</h1>
<table class="table table-striped">
    <thead>
        <tr>

            <th>Område</th>
            <th>Antal Personer</th>
            <th>Beskrivelse</th>
            <th>Start Tid</th>
            <th>Slut tid</th>
            <th>Prioritering</th>
            <th>&zwnj;</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var vagt in VagtListe)
        {
            <tr>
                <td>@vagt.område</td>
                <td>@vagt.antal_personer</td>
                <td>@vagt.beskrivelse</td>
                <td>@vagt.start_tid</td>
                <td>@vagt.slut_tid</td>
                <td>@vagt.priotering</td>
                @if (vagt.antal_personer > 0)
                {
                <td>
                        <button class="btn btn-primary" @onclick="(() => BookVagt(vagt.vagt_id))">Book vagt</button>
                </td>
                }
            </tr>
        }
    </tbody>  
</table>
<h1 class="mb-3 mt-3">Din Bookinger</h1>

<table class="table table-striped">
    <thead>
        <tr>

            <th>Område</th>
            <th>Beskrivelse</th>
            <th>Start Tid</th>
            <th>Slut tid</th>
            <th>Prioritering</th>
            <th>Vagt id</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var booking in BookingListe)
        {
            <tr>
                <td>@booking.område</td>
                <td>@booking.beskrivelse</td>
                <td>@booking.start_tid</td>
                <td>@booking.slut_tid</td>
                <td>@booking.priotering</td>
                <td>@booking.vagt_id</td>
            </tr>
        }
    </tbody>
</table>
<div>
    <button onclick="@SkiftBrugerInfo">Skift din bruger information</button>
</div>

@code {
    // Laver en liste med datamodel klasserne fra shared
    public List<Vagt> VagtListe = new List<Vagt>();
    public List<Booking> BookingListe = new List<Booking>();

    // Injecter metoderne fra services
    [Inject]
    public IVagtService ServiceVagt { get; set; }
    [Inject]
    public IBookingService ServiceBooking { get; set; }
    // På initialized henter vagter og brugere
    protected override async Task OnInitializedAsync()
    {
        var bruger_id = GlobalState.bruger_id;
        BookingListe = (await ServiceBooking.HentBookingerForBruger(bruger_id)).ToList();
        VagtListe = (await ServiceVagt.HentAlleVagter()).ToList();
    }

    private void SkiftBrugerInfo()
    {
        var bruger_id = GlobalState.bruger_id;
        NavManager.NavigateTo($"/personinfo/{bruger_id}");
    }

    private async Task BookVagt(int vagtId)
    {
        // Opret en ny booking
        var booking = new BookingSql
            {
                bruger_id = GlobalState.bruger_id,
                vagt_id = vagtId
            };

        try
        {
            await ServiceBooking.OpretBooking(booking);

            // Opdaterer bookinglisten efter en vellykket booking
            BookingListe = (await ServiceBooking.HentBookingerForBruger(GlobalState.bruger_id)).ToList();
            VagtListe = (await ServiceVagt.HentAlleVagter()).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Håndter fejl her...
            Console.WriteLine("Fejl ved booking: " + ex.Message);
        }
    }
}   


