
@page "/koordinator"
@using MiljøFestivalv2.Shared
@using System.Net.Http.Json
@using Client.Services
@using System.Globalization
@inject HttpClient Http
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime;

<head><link rel="stylesheet" href="Koordinator.razor.css" /></head>

<h1>Koordinator</h1>

@if (VagtListe.Count == 0)
{
    <img src="Images/loading.gif" class="GIF">
}
else
{
    <!-- Printer alle Frivillige ud-->
    <h2>Alle Frivillige</h2>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>fulde navn</th>
                <th>email</th>
                <th>telefon nummer</th>
                <th>fødselsdag</th>
                <th>cpr nummer</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var frivillige in FrivilligListe)
                {
                <tr>
                    <td>@frivillige.fulde_navn</td>
                    <td>@frivillige.email</td>
                    <td>@frivillige.telefon_nummer</td>
                    <td>@frivillige.GetFødselsdag()</td>
                    <td>@frivillige.cpr_nummer</td>

                    @if (frivillige.er_aktiv)
                        {
                        <td><button class="MainButton" style="width: 70%" @onclick="() => SkiftAktivStatus(frivillige.bruger_id)">Deaktiver bruger</button> </td>
                        }
                        else
                        {
                        <td><button class="MainButton" style="width: 70%" @onclick="() => SkiftAktivStatus(frivillige.bruger_id)">Aktiver bruger</button> </td>
                        }

                    @if (frivillige.er_blacklistet)
                        {
                        <td><button class="MainButton" style="width: 70%; background-color: grey" @onclick="() => SkiftBlacklistStatus(frivillige.bruger_id)">Whitelist bruger</button> </td>
                        }
                        else
                        {
                        <td><button class="MainButton" style="width: 70%" @onclick="() => SkiftBlacklistStatus(frivillige.bruger_id)">Blacklist bruger</button> </td>
                        }

                </tr>
                }
        </tbody>
    </table>

    <!-- Printer alle vagter ud-->
    <h2>Alle Vagter</h2>
    <div><button class="MainButton" style="width: 10%; margin-bottom: 10px" @onclick="ScrollToBottom">Opret vagt</button></div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Område</th>
               <th> <button class="MainButton" style="width: 80%" @onclick="SortByAntalPersoner">Antal Personer</button> </th>
                <th>Beskrivelse</th>
                <th>Start Tid</th>
                <th>Slut tid</th>
                <th>Prioritering</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vagt in VagtListe)
                {
                <tr>
                    <td>@vagt.område</td>
                    <td>@vagt.antal_personer</td>
                    <td>@vagt.beskrivelse</td>
                    <td>@vagt.FjernSekunderStart().ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@vagt.FjernSekunderSlut().ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@vagt.priotering</td>
                    <td>
                <button class="MainButton" @onclick="() => RedigerVagt(vagt.vagt_id)">Rediger vagt</button>
                </td>
                <td>
                <button class="btn btn-danger"@onclick="() => DeleteVagt(vagt.vagt_id)">Fjern Vagt</button>
                </td
                </tr>
                }
        </tbody>
    </table>

    <!-- Printer alle bookinger-->
    <h2>Bookinger</h2>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Område</th>
                <th>Beskrivelse</th>
                <th>Frivillige</th>
                <th>Telefon nummer</th>
                <th>Start Tid</th>
                <th>Slut tid</th>
                <th>Prioritering</th>
                <th>Vagt id</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var booking in BookingListe)
                {
                <tr>
                    <td>@booking.område</td>
                    <td>@booking.beskrivelse</td>
                    <td>@booking.fulde_navn</td>
                    <td>@booking.telefon_nummer</td>
                    <td>@booking.FjernSekunderStart().ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@booking.FjernSekunderSlut().ToString("yyyy-MM-dd HH:mm")</td>
                    <td>@booking.priotering</td>
                    <td>@booking.vagt_id</td>
                    @if (booking.er_låst)
                    {
                        <td><button class="MainButton" @onclick="() => SkiftLåsStatus(booking.booking_id)">Åbn booking</button> </td>
                    }
                    else
                    {
                        <td><button class="MainButton" @onclick="() => SkiftLåsStatus(booking.booking_id)">Lås booking</button> </td>
                    }
                <td>
                    <button class="btn btn-danger" @onclick="() => SletBooking(booking.booking_id)">Slet booking</button>
                </td>
                </tr>
                }
        </tbody>
    </table>

    //editform til at oprette vagter
     <h2>Opret vagt</h2>
  <div style="display:flex; justify-content:start">
    <EditForm EditContext="@cEditContext" class="row p-3" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="opret">
        <div class="container"> 
            <div>
                <label>Område:</label>
                <InputText id="område" style="width: 200px" @bind-Value="vagt.område" required />
            </div>
            <div>
                <label>Start tid:</label>
                <InputDate id="start_tid" style="width: 200px" @bind-Value="vagt.start_tid" required />
            </div>
            <div>
                <label>Slut tid:</label>
                <InputDate id="slut_tid" style="width: 200px" @bind-Value="vagt.slut_tid" required />
            </div>
            <div>
                <label>Vagt beskrivelse:</label>
                <InputText id="beskrivelse" style="width: 200px" @bind-Value="vagt.beskrivelse" required />
            </div>
            <div>
                <label>Priotet:</label>
            <InputSelect id="priotering" style="width: 200px" @bind-Value="vagt.priotering" class="form-control">
                <option value="lav" style="color:black">Vælg priotet</option>
               <option value="høj" style="color:black">høj</option>
               <option value="lav" style="color:black">lav</option>
            </InputSelect>
           </div>
            <div>
                <label>Antal Point</label>
                <InputNumber id="point" style="width: 200px" @bind-Value="vagt.point" required />
            </div>
            <div>
                <label>Antal personer:</label>
                <InputNumber id="antal_personer" style="width: 200px" @bind-Value="vagt.antal_personer" required />
            </div>
            <button class="MainButton" type="submit">Opret vagt</button>
        </div>
        </div>
      
    </EditForm>
   </div>
   <h2>Opret besked</h2>
   <div style="display:flex; justify-content:start">
        <EditForm EditContext="@dEditContext" class="row p-3" OnValidSubmit="@HandleValidSubmitBeskeder">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="opret">
        <div class="container"> 
            <div>
                <label>Besked</label>
                <InputText id="besked" style="width: 200px" @bind-Value="besked.besked" required />
            </div>
            <div>
                <label>Afsender</label>
                <InputText id="afsender" style="width: 200px" @bind-Value="besked.afsender" required />
            </div>
            <button class="MainButton" type="submit">Opret besked</button>
        </div>
        </div>
    </EditForm>
    </div>


}

@code {
    private EditContext cEditContext;
    private EditContext dEditContext;
    Vagt vagt = new Vagt();
    Msg_board besked = new Msg_board();


    // Laver en liste med datamodel klasserne fra shared
    public List<Bruger> FrivilligListe = new List<Bruger>();
    public List<Vagt> VagtListe = new List<Vagt>();
    public List<Booking> BookingListe = new List<Booking>();
    public List<Msg_board> BeskedListe = new List<Msg_board>();


    // Injecter metoderne fra services
    [Inject]
    public IVagtService ServiceVagt { get; set; }
    [Inject]
    public IBrugerService ServiceBruger { get; set; }
    [Inject]
    public IBookingService ServiceBooking { get; set; }
    [Inject]
    public IMessageService ServiceMessage { get; set; }

    // Når siden åbnes hentes frivillige, bookinger og vagter
    protected override async Task OnInitializedAsync()
    {

        cEditContext = new EditContext(vagt);
        dEditContext = new EditContext(besked);

        FrivilligListe = (await ServiceBruger.HentAlleFrivillige()).ToList();
        VagtListe = (await ServiceVagt.HentAlleVagter()).ToList();
        BookingListe = (await ServiceBooking.HentAlleBookinger()).ToList();
    }

    // Metoden der bruges på vores fjern vagt knap, sletter vagten på listen ud fra id
    private async Task DeleteVagt(int vagt_id)
    {
        await ServiceVagt.DeleteVagt(vagt_id);
        VagtListe = (await ServiceVagt.HentAlleVagter()).ToList();
        StateHasChanged();
    }

    private async Task SkiftAktivStatus(int bruger_id)
    {
        await ServiceBruger.SkiftAktivStatus(bruger_id);
        FrivilligListe = (await ServiceBruger.HentAlleFrivillige()).ToList();
        StateHasChanged();
    }

    private async Task SkiftBlacklistStatus(int bruger_id)
    {
        await ServiceBruger.SkiftBlacklistStatus(bruger_id);
        FrivilligListe = (await ServiceBruger.HentAlleFrivillige()).ToList();
        StateHasChanged();
    }

    private async Task SkiftLåsStatus(int BookingId)
    {
        await ServiceBooking.SkiftLåsStatus(BookingId);
        BookingListe = (await ServiceBooking.HentAlleBookinger()).ToList();
        StateHasChanged();
    }
    // handlevalidsumbit til vagter editformen
    private async Task HandleValidSubmit()
    {
        await ServiceVagt.TilføjVagt(vagt);
        StateHasChanged();

    }
    // handlevalidsumbit til beskeder editformen
    private async Task HandleValidSubmitBeskeder()
    {
        // sender det nuværende tidspunkt og dato når man trykker sumbit knappen til beskeder
        besked.tidspunkt = DateTime.Now;
        await ServiceMessage.TilføjBesked(besked);
        StateHasChanged();
    }

    private async Task SletBooking(int BookingId)
    {
        await ServiceBooking.SletBooking(BookingId);
        BookingListe = (await ServiceBooking.HentAlleBookinger()).ToList();
        VagtListe = (await ServiceVagt.HentAlleVagter()).ToList();
        StateHasChanged();
    }

    private void RedigerVagt(int vagt_id)
    {
        NavManager.NavigateTo($"/opdatervagt/{vagt_id}");
    }

    // Filtrer vagterne efter antal_personer når man trykker på kolonnen i tabellen
    private bool sortAsc = true;
    private void SortByAntalPersoner()
    {
      if (sortAsc)
      {
        VagtListe = VagtListe.OrderBy(v => v.antal_personer).ToList();
      }
      else
      {
      VagtListe = VagtListe.OrderByDescending(v => v.antal_personer).ToList();
      }
        sortAsc = !sortAsc;
      }

    private async Task ScrollToBottom()
    {
    await jsRuntime.InvokeVoidAsync("scrollToBottom");
    }

    }


